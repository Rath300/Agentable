generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String     @id @default(cuid())
  name          String?
  email         String?    @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  workflows     Workflow[]
  subscription  Subscription?
  apiKeys       Json?
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
}

model Subscription {
  id            String   @id @default(cuid())
  userId        String   @unique
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  tier          String   @default("free")
  status        String   @default("active")
  currentPeriodStart DateTime
  currentPeriodEnd   DateTime
  cancelAtPeriodEnd  Boolean @default(false)
  canceledAt        DateTime?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model Workflow {
  id          String   @id @default(cuid())
  name        String
  description String?
  nodes       Json
  edges       Json
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  executions  WorkflowExecution[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model WorkflowExecution {
  id            String   @id @default(cuid())
  workflowId    String
  workflow      Workflow @relation(fields: [workflowId], references: [id], onDelete: Cascade)
  userId        String
  status        String
  output        Json?
  error         String?
  executionTime Int
  createdAt     DateTime @default(now())
} 